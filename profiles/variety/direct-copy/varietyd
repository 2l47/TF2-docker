#!/usr/bin/env python3

import daemon
import logging, logging.handlers
import os
import pprint
import re
import requests
import schedule
import setproctitle
import signal
import subprocess
import textwrap
import time
import traceback



# Enter the TF2 server directory
os.chdir(os.path.expanduser("~/tf-dedicated"))


# The container's region name and instance number
with open("container-info.dat") as f:
	container_info = f.read().strip()


# Pre-load the webhook url
with open("varietyd-webhook-url.txt") as f:
	webhook_url = f.read().strip()


# Log to stdout and file
stdout_handler = logging.StreamHandler()
file_handler = logging.handlers.RotatingFileHandler("varietyd.log", maxBytes=1024 * 1024, backupCount=5)
logging.basicConfig(
	format = "[%(asctime)s] [%(levelname)s] [%(funcName)s:%(lineno)d] %(message)s",
	datefmt = "%a %b %d @ %R:%S",
	# The default level for loggers is WARNING instead of NOTSET like for handlers
	# We use DEBUG instead of NOTSET here since we actually do log some extra data below DEBUG that we usually don't need to see
	level = logging.DEBUG,
	handlers = [stdout_handler, file_handler]
)

# Ignore debug logging from the urllib3 library
logging.getLogger("urllib3").setLevel(logging.INFO)

# Stash the file descriptors of our logging handlers so they can be preserved when we daemonize
files_preserve = [stdout_handler.stream.fileno(), file_handler.stream.fileno()]


# This regex will match a string up to the last instance of sentence-ending punctuation
__pattern__ = re.compile(r".*[!\?\.]")

# This function trims the string to the last complete portion within the character limit
def trim(string, limit=80):
	if len(string) <= limit:
		return string
	else:
		stop = string.rfind("\n", 0, limit)
		if stop != -1:
			return string[:stop]
		else:
			# Use regex to find the most recent punctuation within the limit
			match = __pattern__.match(string[:limit])
			if match:
				return match.group()
			else:
				# If there is no punctuation, return the string up to the last word
				if " " in string:
					return string[:string.rfind(" ", 0, limit)]
				else:
					# If there are no spaces in the string, just cut off at the character limit
					return string[:limit]


# Appends an ellipsis to the trimmed message, for Discord
def discord_trim(message):
	trimmed = trim(message, limit=2000)
	if trimmed != message:
		return trim(message, limit=1996) + "\n..."
	else:
		return trimmed


# Indents the given string
def indent(string):
	return textwrap.indent(string, "\t")


# Sends the given content to the Discord webhook
def whSend(content, username="varietyd", attempt_num=1):
	# All content should be prefixed with the container info
	if attempt_num == 1:
		content = f"[{container_info}] {content}"
		logging.debug(f"whSend() fed content (actual length {len(content)}):")
		logging.debug(f"{indent(trim(content))}")
	# Tack on a header for retries
	toSend = f"[RETRY {attempt_num - 1}] {content}" if attempt_num > 1 else content
	# Log the full content below the DEBUG level
	logging.log(9, f"Full content:\n{indent(content)}")
	# Trim content to the last line that will fit in a message
	toSend = discord_trim(toSend)
	response = requests.post(f"{webhook_url}?wait=true", data={"content": toSend, "username": username})
	# Make sure the message was sent; if not, retry up to 2 more times
	json = response.json()
	logging.debug(f"Webhook response:\n{indent(pprint.pformat(json, indent=4))}")
	if "content" not in json:
		logging.warning("Content wasn't sent via webhook!")
		if attempt_num < 3:
			logging.info("Retrying webhook send...")
			# If we were ratelimited, wait the specified amount of time
			if "retry_after" in json:
				timeout = round(int(json["retry_after"]) / 1000, 2)
				logging.debug(f"Webhook is being ratelimited, waiting {timeout} seconds...")
				time.sleep(timeout)
			# Otherwise just wait a second
			else:
				time.sleep(1)
			whSend(content, username, attempt_num + 1)
		else:
			logging.error(f"Failed to send to webhook! Username {username}, Content:\n{content}")
	else:
		logging.debug("whSend() success!\n")


whSend("Container started, server starting...")


def autorotate():
	whSend("Running autorotate")
	try:
		output = subprocess.check_output("./autorotate.py", stderr=subprocess.STDOUT).decode()
		if output:
			whSend(output, username="autorotate")
	except subprocess.CalledProcessError as ex:
		error = ex.output.decode()
		whSend(f"```{error}```", username="autorotate: subprocess error")


def main():
	# Initialize the server's mapcycle in case it isn't already, e.g. new container
	autorotate()

	# Schedule autorotate to switch rotations every day at 6 AM
	schedule.every().day.at("06:00").do(autorotate)

	# Run forever-ish
	while True:
		schedule.run_pending()
		time.sleep(1)


def exitHandler(signum, frame):
	signame = signal.Signals(signum).name
	whSend(f"Daemon received signal {signame} ({signum}), terminating!")
	context.terminate(signum, frame)


# If an instance is already running, terminate it and then truncate the log file.
# This is generally only bound to occur during development.
# Get this instance's PID first we don't kill ourselves lmao
our_pid = os.getpid()
for pid in os.listdir("/proc"):
	if not pid.isdigit():
		continue
	if int(pid) == our_pid:
		continue
	with open(os.path.join("/proc", pid, "comm"), "r") as f:
		if f.read().strip() == "varietyd":
			# Send SIGTERM to the process and wait for it to exit
			logging.warning(f"[{our_pid}] Sending SIGTERM to existing varietyd instance (PID {pid})!")
			os.kill(int(pid), 15)
			while True:
				try:
					os.kill(int(pid), 15)
					logging.warning(f"[{our_pid}] Waiting for varietyd (PID {pid}) to die...")
					time.sleep(1)
				except ProcessLookupError:
					break
			# Now truncate the log file
			logging.warning(f"[{our_pid}] Truncating log file...")
			with open("varietyd.log", "w") as f:
				f.truncate()

# We have to explicitly set detach_process to True for the container because otherwise python-daemon will check and believe it's already detached
context = daemon.DaemonContext(detach_process=True, files_preserve=files_preserve, working_directory=os.getcwd())
context.signal_map = { signal.SIGTERM: exitHandler }
with context:
	whSend("Entered daemon context")
	# Set our process name
	setproctitle.setproctitle("varietyd")
	try:
		main()
	except Exception as ex:
		error = "".join(traceback.format_exception(type(ex), ex, ex.__traceback__))
		whSend(f"```{error}```", username="varietyd: main() error")

whSend("Left daemon context due to error, terminating!")
